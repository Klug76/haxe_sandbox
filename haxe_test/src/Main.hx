package;

import com.gs.KonsoleDemo;
import com.gs.femto_ui.util.RingBuf;
import flash.Lib;
import flash.display.Sprite;
import flash.display.Stage;
import flash.display.StageAlign;
import flash.display.StageScaleMode;
import haxe.unit.TestCase;
import haxe.unit.TestRunner;

/*
haxe -cp src -as3 as3_gen -swf-version 22 -D analyzer-optimize -main Main -dce full
haxe -cp src -as3 as3_gen -swf-header 800:600:30:FFFFFF -swf-version 22 -D analyzer-optimize -main Main -dce full -lib hscript
*/

class Main
{

	static function main()
	{
		var stage = Lib.current.stage;
		//stage.scaleMode = StageScaleMode.NO_BORDER;
		stage.scaleMode = StageScaleMode.NO_SCALE;
		stage.align = StageAlign.TOP_LEFT;
		// Entry point

		//var tr = new TestRunner();
		//tr.add(new TestRingBuf());
		//tr.add(new TestAlchemy());
		//tr.add(new TestUI(stage));
		//tr.add(new TestConsole(stage));
		// add other TestCases here

		// finally, run the tests
		//tr.run();

		var sp: Sprite = new Sprite();
		stage.addChild(sp);
		KonsoleDemo.create_UI(sp);
		//trace("OK");
	}
/*
	static function main()
	{
		trace(getDefines());
	}
//Main.hx:45: {flash10_1 => 1, flash11_7 => 1, flash11_8 => 1, flash_strict => 1, haxe_ver => 3.407, flash12 => 1, true => 1,
flash => 1,
flash11_3 => 1,
debug => 1,
flash17 => 1, flash10 => 1, flash11_9 => 1, flash11_2 => 1, flash11_1 => 1, flash11_6 => 1, flash14 => 1,
fdb => 1,
flash15 => 1, flash11_4 => 1, flash13 => 1, flash10_3 => 1, flash16 => 1, haxe3 => 1, flash11_5 => 1, flash9 => 1,
no_inline => 1, hscript => 2.2.0, dce => std, flash11 => 1, flash10_2 => 1, source-header => Generated by Haxe 3.4.7}


	// Shorthand for retrieving a map of all defined compiler flags.
	static macro function getDefines() : haxe.macro.Expr
	{
		var defines : Map<String, String> = haxe.macro.Context.getDefines();
		// Construct map syntax so we can return it as an expression
		var map : Array<haxe.macro.Expr> = [];
		for (key in defines.keys())
		{
			map.push(macro $v{key} => $v{Std.string(defines.get(key))});
		}
		return macro $a{map};
	}
*/
}